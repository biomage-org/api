// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`non-tests to document the State Machines - gem2s local development 1`] = `

{
  "Comment": "Gem2s Pipeline for clusterEnv 'development'",
  "StartAt": "DeleteCompletedPipelineWorker",
  "States": {
    "DeleteCompletedPipelineWorker": {
      "Next": "LaunchNewPipelineWorker",
      "ResultPath": null,
      "Type": "Task",
      "Comment": "Removes Docker containers with pipeline runs on the local machine.",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-west-1:mock-account-id:function:remove-previous-pipeline-containers"
      }
    },
    "LaunchNewPipelineWorker": {
      "Next": "DownloadGem",
      "ResultPath": null,
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-west-1:mock-account-id:function:local-container-launcher",
        "Payload": {
          "image": "biomage-pipeline-runner",
          "name": "undefined-runner",
          "detached": true
        }
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error-info",
          "Next": "DownloadGem"
        }
      ]
    },
    "DownloadGem": {
      "Next": "PreProcessing",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "downloadGem",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "PreProcessing": {
      "Next": "EmptyDrops",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "preproc",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "EmptyDrops": {
      "Next": "DoubletScores",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "emptyDrops",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "DoubletScores": {
      "Next": "CreateSeurat",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "doubletScores",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "CreateSeurat": {
      "Next": "PrepareExperiment",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "createSeurat",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "PrepareExperiment": {
      "Next": "UploadToAWS",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "prepareExperiment",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "UploadToAWS": {
      "Next": "EndOfGem2S",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "uploadToAWS",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "EndOfGem2S": {
      "Type": "Pass",
      "End": true
    }
  }
}
`;

exports[`non-tests to document the State Machines - gem2s production 1`] = `

{
  "Comment": "Gem2s Pipeline for clusterEnv 'production'",
  "StartAt": "GetExperimentRunningPods",
  "States": {
    "GetExperimentRunningPods": {
      "Next": "DeletePreviousPods",
      "ResultPath": "$.runningPods",
      "Type": "Task",
      "Comment": "Retrieves running pods assigned to the experiment ID.",
      "Resource": "arn:aws:states:::eks:call",
      "Parameters": {
        "ClusterName": "mock-cluster-name",
        "CertificateAuthority": "mock-ca",
        "Endpoint": "mock-endpoint",
        "Method": "GET",
        "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
        "QueryParameters": {
          "labelSelector": [
            "experimentId=mock-experiment-id,type=pipeline"
          ],
          "fieldSelector": [
            "status.phase=Running"
          ]
        }
      }
    },
    "DeletePreviousPods": {
      "ResultPath": null,
      "Next": "AssignPipelineToPod",
      "Type": "Map",
      "ItemsPath": "$.runningPods.ResponseBody.items",
      "MaxConcurrency": 0,
      "Iterator": {
        "StartAt": "DeletePod",
        "States": {
          "DeletePod": {
            "Type": "Task",
            "End": true,
            "Comment": "Patch pod to set the activity ID label.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "DELETE",
              "Path.$": "$.metadata.selfLink"
            },
            "Catch": [
              {
                "ErrorEquals": [
                  "EKS.404"
                ],
                "Next": "Ignore404"
              }
            ]
          },
          "Ignore404": {
            "Type": "Pass",
            "End": true
          }
        }
      }
    },
    "AssignPipelineToPod": {
      "ResultPath": null,
      "Next": "WaitForPod",
      "Type": "Map",
      "ItemsPath": "$.retries",
      "MaxConcurrency": 1,
      "Retry": [
        {
          "ErrorEquals": [
            "NoPodsAvailable"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 11,
          "BackoffRate": 1.5
        }
      ],
      "Iterator": {
        "StartAt": "GetUnassignedPod",
        "States": {
          "GetUnassignedPod": {
            "Next": "IsPodAvailable",
            "Type": "Task",
            "Comment": "Retrieves first unassigned and running pipeline pod.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "GET",
              "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
              "QueryParameters": {
                "labelSelector": [
                  "!activityId,type=pipeline"
                ],
                "fieldSelector": [
                  "status.phase=Running"
                ]
              }
            }
          },
          "IsPodAvailable": {
            "Type": "Choice",
            "Comment": "Redirects to an error state if there are no available pods.",
            "Choices": [
              {
                "Variable": "$.ResponseBody.items[0]",
                "IsPresent": false,
                "Next": "NoPodsAvailable"
              }
            ],
            "Default": "AssignPodToPipeline"
          },
          "NoPodsAvailable": {
            "Type": "Fail",
            "Cause": "No available and running pipeline pods.",
            "Error": "NoPodsAvailable"
          },
          "AssignPodToPipeline": {
            "Description": "Send a message through SNS so that the API assigns a pod to the pipeline",
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "End": true,
            "Parameters": {
              "TopicArn": "arn:aws:sns:us-east-1:123456789012:myTopic",
              "MessageAttributes": {
                "kind": {
                  "DataType": "String",
                  "StringValue.$": "assignPodToPipeline"
                },
                "sandboxId": {
                  "DataType": "String"
                },
                "experimentId": {
                  "DataType": "String",
                  "StringValue.$": "mock-experiment-id"
                },
                "activityId": {
                  "DataType": "String"
                },
                "processName": {
                  "DataType": "String"
                }
              }
            }
          }
        }
      }
    },
    "WaitForPod": {
      "ResultPath": null,
      "Type": "Map",
      "ItemsPath": "$.retries",
      "MaxConcurrency": 1,
      "Retry": [
        {
          "ErrorEquals": [
            "NoPodsAvailable"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 11,
          "BackoffRate": 1.5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "AssignPipelineToPod"
        }
      ],
      "Next": "DownloadGem",
      "Iterator": {
        "StartAt": "GetUnassignedPod",
        "States": {
          "GetUnassignedPod": {
            "Next": "IsPodAvailable",
            "Type": "Task",
            "Comment": "Retrieves first unassigned and running pipeline pod.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "GET",
              "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
              "QueryParameters": {
                "labelSelector": [
                  "!activityId,type=pipeline"
                ],
                "fieldSelector": [
                  "status.phase=Running"
                ]
              }
            }
          },
          "IsPodAvailable": {
            "Type": "Choice",
            "Comment": "Redirects to an error state if there are no available pods.",
            "Choices": [
              {
                "Variable": "$.ResponseBody.items[0]",
                "IsPresent": false,
                "Next": "NoPodsAvailable"
              }
            ],
            "Default": "AssignPodToPipeline"
          },
          "NoPodsAvailable": {
            "Type": "Fail",
            "Cause": "No available and running pipeline pods.",
            "Error": "NoPodsAvailable"
          },
          "AssignPodToPipeline": {
            "Description": "Send a message through SNS so that the API assigns a pod to the pipeline",
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "End": true,
            "Parameters": {
              "TopicArn": "arn:aws:sns:us-east-1:123456789012:myTopic",
              "MessageAttributes": {
                "kind": {
                  "DataType": "String",
                  "StringValue.$": "assignPodToPipeline"
                },
                "sandboxId": {
                  "DataType": "String"
                },
                "experimentId": {
                  "DataType": "String",
                  "StringValue.$": "mock-experiment-id"
                },
                "activityId": {
                  "DataType": "String"
                },
                "processName": {
                  "DataType": "String"
                }
              }
            }
          }
        }
      }
    },
    "DownloadGem": {
      "Next": "PreProcessing",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "downloadGem",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "PreProcessing": {
      "Next": "EmptyDrops",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "preproc",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "EmptyDrops": {
      "Next": "DoubletScores",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "emptyDrops",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "DoubletScores": {
      "Next": "CreateSeurat",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "doubletScores",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "CreateSeurat": {
      "Next": "PrepareExperiment",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "createSeurat",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "PrepareExperiment": {
      "Next": "UploadToAWS",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "prepareExperiment",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "UploadToAWS": {
      "Next": "EndOfGem2S",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "uploadToAWS",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "EndOfGem2S": {
      "Type": "Pass",
      "End": true
    }
  }
}
`;

exports[`non-tests to document the State Machines - gem2s staging 1`] = `

{
  "Comment": "Gem2s Pipeline for clusterEnv 'staging'",
  "StartAt": "GetExperimentRunningPods",
  "States": {
    "GetExperimentRunningPods": {
      "Next": "DeletePreviousPods",
      "ResultPath": "$.runningPods",
      "Type": "Task",
      "Comment": "Retrieves running pods assigned to the experiment ID.",
      "Resource": "arn:aws:states:::eks:call",
      "Parameters": {
        "ClusterName": "mock-cluster-name",
        "CertificateAuthority": "mock-ca",
        "Endpoint": "mock-endpoint",
        "Method": "GET",
        "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
        "QueryParameters": {
          "labelSelector": [
            "experimentId=mock-experiment-id,type=pipeline"
          ],
          "fieldSelector": [
            "status.phase=Running"
          ]
        }
      }
    },
    "DeletePreviousPods": {
      "ResultPath": null,
      "Next": "AssignPipelineToPod",
      "Type": "Map",
      "ItemsPath": "$.runningPods.ResponseBody.items",
      "MaxConcurrency": 0,
      "Iterator": {
        "StartAt": "DeletePod",
        "States": {
          "DeletePod": {
            "Type": "Task",
            "End": true,
            "Comment": "Patch pod to set the activity ID label.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "DELETE",
              "Path.$": "$.metadata.selfLink"
            },
            "Catch": [
              {
                "ErrorEquals": [
                  "EKS.404"
                ],
                "Next": "Ignore404"
              }
            ]
          },
          "Ignore404": {
            "Type": "Pass",
            "End": true
          }
        }
      }
    },
    "AssignPipelineToPod": {
      "ResultPath": null,
      "Next": "WaitForPod",
      "Type": "Map",
      "ItemsPath": "$.retries",
      "MaxConcurrency": 1,
      "Retry": [
        {
          "ErrorEquals": [
            "NoPodsAvailable"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 11,
          "BackoffRate": 1.5
        }
      ],
      "Iterator": {
        "StartAt": "GetUnassignedPod",
        "States": {
          "GetUnassignedPod": {
            "Next": "IsPodAvailable",
            "Type": "Task",
            "Comment": "Retrieves first unassigned and running pipeline pod.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "GET",
              "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
              "QueryParameters": {
                "labelSelector": [
                  "!activityId,type=pipeline"
                ],
                "fieldSelector": [
                  "status.phase=Running"
                ]
              }
            }
          },
          "IsPodAvailable": {
            "Type": "Choice",
            "Comment": "Redirects to an error state if there are no available pods.",
            "Choices": [
              {
                "Variable": "$.ResponseBody.items[0]",
                "IsPresent": false,
                "Next": "NoPodsAvailable"
              }
            ],
            "Default": "AssignPodToPipeline"
          },
          "NoPodsAvailable": {
            "Type": "Fail",
            "Cause": "No available and running pipeline pods.",
            "Error": "NoPodsAvailable"
          },
          "AssignPodToPipeline": {
            "Description": "Send a message through SNS so that the API assigns a pod to the pipeline",
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "End": true,
            "Parameters": {
              "TopicArn": "arn:aws:sns:us-east-1:123456789012:myTopic",
              "MessageAttributes": {
                "kind": {
                  "DataType": "String",
                  "StringValue.$": "assignPodToPipeline"
                },
                "sandboxId": {
                  "DataType": "String"
                },
                "experimentId": {
                  "DataType": "String",
                  "StringValue.$": "mock-experiment-id"
                },
                "activityId": {
                  "DataType": "String"
                },
                "processName": {
                  "DataType": "String"
                }
              }
            }
          }
        }
      }
    },
    "WaitForPod": {
      "ResultPath": null,
      "Type": "Map",
      "ItemsPath": "$.retries",
      "MaxConcurrency": 1,
      "Retry": [
        {
          "ErrorEquals": [
            "NoPodsAvailable"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 11,
          "BackoffRate": 1.5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "AssignPipelineToPod"
        }
      ],
      "Next": "DownloadGem",
      "Iterator": {
        "StartAt": "GetUnassignedPod",
        "States": {
          "GetUnassignedPod": {
            "Next": "IsPodAvailable",
            "Type": "Task",
            "Comment": "Retrieves first unassigned and running pipeline pod.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "GET",
              "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
              "QueryParameters": {
                "labelSelector": [
                  "!activityId,type=pipeline"
                ],
                "fieldSelector": [
                  "status.phase=Running"
                ]
              }
            }
          },
          "IsPodAvailable": {
            "Type": "Choice",
            "Comment": "Redirects to an error state if there are no available pods.",
            "Choices": [
              {
                "Variable": "$.ResponseBody.items[0]",
                "IsPresent": false,
                "Next": "NoPodsAvailable"
              }
            ],
            "Default": "AssignPodToPipeline"
          },
          "NoPodsAvailable": {
            "Type": "Fail",
            "Cause": "No available and running pipeline pods.",
            "Error": "NoPodsAvailable"
          },
          "AssignPodToPipeline": {
            "Description": "Send a message through SNS so that the API assigns a pod to the pipeline",
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "End": true,
            "Parameters": {
              "TopicArn": "arn:aws:sns:us-east-1:123456789012:myTopic",
              "MessageAttributes": {
                "kind": {
                  "DataType": "String",
                  "StringValue.$": "assignPodToPipeline"
                },
                "sandboxId": {
                  "DataType": "String"
                },
                "experimentId": {
                  "DataType": "String",
                  "StringValue.$": "mock-experiment-id"
                },
                "activityId": {
                  "DataType": "String"
                },
                "processName": {
                  "DataType": "String"
                }
              }
            }
          }
        }
      }
    },
    "DownloadGem": {
      "Next": "PreProcessing",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "downloadGem",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "PreProcessing": {
      "Next": "EmptyDrops",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "preproc",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "EmptyDrops": {
      "Next": "DoubletScores",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "emptyDrops",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "DoubletScores": {
      "Next": "CreateSeurat",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "doubletScores",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "CreateSeurat": {
      "Next": "PrepareExperiment",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "createSeurat",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "PrepareExperiment": {
      "Next": "UploadToAWS",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "prepareExperiment",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "UploadToAWS": {
      "Next": "EndOfGem2S",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "uploadToAWS",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "EndOfGem2S": {
      "Type": "Pass",
      "End": true
    }
  }
}
`;

exports[`non-tests to document the State Machines - qc local development 1`] = `

{
  "Comment": "QC Pipeline for clusterEnv 'development'",
  "StartAt": "DeleteCompletedPipelineWorker",
  "States": {
    "DeleteCompletedPipelineWorker": {
      "Next": "LaunchNewPipelineWorker",
      "ResultPath": null,
      "Type": "Task",
      "Comment": "Removes Docker containers with pipeline runs on the local machine.",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-west-1:mock-account-id:function:remove-previous-pipeline-containers"
      }
    },
    "LaunchNewPipelineWorker": {
      "Next": "ClassifierFilterMap",
      "ResultPath": null,
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-west-1:mock-account-id:function:local-container-launcher",
        "Payload": {
          "image": "biomage-pipeline-runner",
          "name": "undefined-runner",
          "detached": true
        }
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error-info",
          "Next": "ClassifierFilterMap"
        }
      ]
    },
    "ClassifierFilterMap": {
      "Type": "Map",
      "Next": "CellSizeDistributionFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "ClassifierFilter",
        "States": {
          "ClassifierFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "classifier",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "CellSizeDistributionFilterMap": {
      "Type": "Map",
      "Next": "MitochondrialContentFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "CellSizeDistributionFilter",
        "States": {
          "CellSizeDistributionFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "cellSizeDistribution",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "MitochondrialContentFilterMap": {
      "Type": "Map",
      "Next": "NumGenesVsNumUmisFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "MitochondrialContentFilter",
        "States": {
          "MitochondrialContentFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "mitochondrialContent",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "NumGenesVsNumUmisFilterMap": {
      "Type": "Map",
      "Next": "DoubletScoresFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "NumGenesVsNumUmisFilter",
        "States": {
          "NumGenesVsNumUmisFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "numGenesVsNumUmis",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "DoubletScoresFilterMap": {
      "Type": "Map",
      "Next": "DataIntegration",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "DoubletScoresFilter",
        "States": {
          "DoubletScoresFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "doubletScores",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "DataIntegration": {
      "Next": "ConfigureEmbedding",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "dataIntegration",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "ConfigureEmbedding": {
      "Next": "EndOfPipeline",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "configureEmbedding",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "EndOfPipeline": {
      "Type": "Pass",
      "End": true
    }
  }
}
`;

exports[`non-tests to document the State Machines - qc production 1`] = `

{
  "Comment": "QC Pipeline for clusterEnv 'production'",
  "StartAt": "GetExperimentRunningPods",
  "States": {
    "GetExperimentRunningPods": {
      "Next": "DeletePreviousPods",
      "ResultPath": "$.runningPods",
      "Type": "Task",
      "Comment": "Retrieves running pods assigned to the experiment ID.",
      "Resource": "arn:aws:states:::eks:call",
      "Parameters": {
        "ClusterName": "mock-cluster-name",
        "CertificateAuthority": "mock-ca",
        "Endpoint": "mock-endpoint",
        "Method": "GET",
        "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
        "QueryParameters": {
          "labelSelector": [
            "experimentId=mock-experiment-id,type=pipeline"
          ],
          "fieldSelector": [
            "status.phase=Running"
          ]
        }
      }
    },
    "DeletePreviousPods": {
      "ResultPath": null,
      "Next": "AssignPipelineToPod",
      "Type": "Map",
      "ItemsPath": "$.runningPods.ResponseBody.items",
      "MaxConcurrency": 0,
      "Iterator": {
        "StartAt": "DeletePod",
        "States": {
          "DeletePod": {
            "Type": "Task",
            "End": true,
            "Comment": "Patch pod to set the activity ID label.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "DELETE",
              "Path.$": "$.metadata.selfLink"
            },
            "Catch": [
              {
                "ErrorEquals": [
                  "EKS.404"
                ],
                "Next": "Ignore404"
              }
            ]
          },
          "Ignore404": {
            "Type": "Pass",
            "End": true
          }
        }
      }
    },
    "AssignPipelineToPod": {
      "ResultPath": null,
      "Next": "WaitForPod",
      "Type": "Map",
      "ItemsPath": "$.retries",
      "MaxConcurrency": 1,
      "Retry": [
        {
          "ErrorEquals": [
            "NoPodsAvailable"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 11,
          "BackoffRate": 1.5
        }
      ],
      "Iterator": {
        "StartAt": "GetUnassignedPod",
        "States": {
          "GetUnassignedPod": {
            "Next": "IsPodAvailable",
            "Type": "Task",
            "Comment": "Retrieves first unassigned and running pipeline pod.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "GET",
              "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
              "QueryParameters": {
                "labelSelector": [
                  "!activityId,type=pipeline"
                ],
                "fieldSelector": [
                  "status.phase=Running"
                ]
              }
            }
          },
          "IsPodAvailable": {
            "Type": "Choice",
            "Comment": "Redirects to an error state if there are no available pods.",
            "Choices": [
              {
                "Variable": "$.ResponseBody.items[0]",
                "IsPresent": false,
                "Next": "NoPodsAvailable"
              }
            ],
            "Default": "AssignPodToPipeline"
          },
          "NoPodsAvailable": {
            "Type": "Fail",
            "Cause": "No available and running pipeline pods.",
            "Error": "NoPodsAvailable"
          },
          "AssignPodToPipeline": {
            "Description": "Send a message through SNS so that the API assigns a pod to the pipeline",
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "End": true,
            "Parameters": {
              "TopicArn": "arn:aws:sns:us-east-1:123456789012:myTopic",
              "MessageAttributes": {
                "kind": {
                  "DataType": "String",
                  "StringValue.$": "assignPodToPipeline"
                },
                "sandboxId": {
                  "DataType": "String"
                },
                "experimentId": {
                  "DataType": "String",
                  "StringValue.$": "mock-experiment-id"
                },
                "activityId": {
                  "DataType": "String"
                },
                "processName": {
                  "DataType": "String"
                }
              }
            }
          }
        }
      }
    },
    "WaitForPod": {
      "ResultPath": null,
      "Type": "Map",
      "ItemsPath": "$.retries",
      "MaxConcurrency": 1,
      "Retry": [
        {
          "ErrorEquals": [
            "NoPodsAvailable"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 11,
          "BackoffRate": 1.5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "AssignPipelineToPod"
        }
      ],
      "Next": "ClassifierFilterMap",
      "Iterator": {
        "StartAt": "GetUnassignedPod",
        "States": {
          "GetUnassignedPod": {
            "Next": "IsPodAvailable",
            "Type": "Task",
            "Comment": "Retrieves first unassigned and running pipeline pod.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "GET",
              "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
              "QueryParameters": {
                "labelSelector": [
                  "!activityId,type=pipeline"
                ],
                "fieldSelector": [
                  "status.phase=Running"
                ]
              }
            }
          },
          "IsPodAvailable": {
            "Type": "Choice",
            "Comment": "Redirects to an error state if there are no available pods.",
            "Choices": [
              {
                "Variable": "$.ResponseBody.items[0]",
                "IsPresent": false,
                "Next": "NoPodsAvailable"
              }
            ],
            "Default": "AssignPodToPipeline"
          },
          "NoPodsAvailable": {
            "Type": "Fail",
            "Cause": "No available and running pipeline pods.",
            "Error": "NoPodsAvailable"
          },
          "AssignPodToPipeline": {
            "Description": "Send a message through SNS so that the API assigns a pod to the pipeline",
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "End": true,
            "Parameters": {
              "TopicArn": "arn:aws:sns:us-east-1:123456789012:myTopic",
              "MessageAttributes": {
                "kind": {
                  "DataType": "String",
                  "StringValue.$": "assignPodToPipeline"
                },
                "sandboxId": {
                  "DataType": "String"
                },
                "experimentId": {
                  "DataType": "String",
                  "StringValue.$": "mock-experiment-id"
                },
                "activityId": {
                  "DataType": "String"
                },
                "processName": {
                  "DataType": "String"
                }
              }
            }
          }
        }
      }
    },
    "ClassifierFilterMap": {
      "Type": "Map",
      "Next": "CellSizeDistributionFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "ClassifierFilter",
        "States": {
          "ClassifierFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "classifier",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "CellSizeDistributionFilterMap": {
      "Type": "Map",
      "Next": "MitochondrialContentFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "CellSizeDistributionFilter",
        "States": {
          "CellSizeDistributionFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "cellSizeDistribution",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "MitochondrialContentFilterMap": {
      "Type": "Map",
      "Next": "NumGenesVsNumUmisFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "MitochondrialContentFilter",
        "States": {
          "MitochondrialContentFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "mitochondrialContent",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "NumGenesVsNumUmisFilterMap": {
      "Type": "Map",
      "Next": "DoubletScoresFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "NumGenesVsNumUmisFilter",
        "States": {
          "NumGenesVsNumUmisFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "numGenesVsNumUmis",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "DoubletScoresFilterMap": {
      "Type": "Map",
      "Next": "DataIntegration",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "DoubletScoresFilter",
        "States": {
          "DoubletScoresFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "doubletScores",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "DataIntegration": {
      "Next": "ConfigureEmbedding",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "dataIntegration",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "ConfigureEmbedding": {
      "Next": "EndOfPipeline",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "configureEmbedding",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "EndOfPipeline": {
      "Type": "Pass",
      "End": true
    }
  }
}
`;

exports[`non-tests to document the State Machines - qc staging 1`] = `

{
  "Comment": "QC Pipeline for clusterEnv 'staging'",
  "StartAt": "GetExperimentRunningPods",
  "States": {
    "GetExperimentRunningPods": {
      "Next": "DeletePreviousPods",
      "ResultPath": "$.runningPods",
      "Type": "Task",
      "Comment": "Retrieves running pods assigned to the experiment ID.",
      "Resource": "arn:aws:states:::eks:call",
      "Parameters": {
        "ClusterName": "mock-cluster-name",
        "CertificateAuthority": "mock-ca",
        "Endpoint": "mock-endpoint",
        "Method": "GET",
        "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
        "QueryParameters": {
          "labelSelector": [
            "experimentId=mock-experiment-id,type=pipeline"
          ],
          "fieldSelector": [
            "status.phase=Running"
          ]
        }
      }
    },
    "DeletePreviousPods": {
      "ResultPath": null,
      "Next": "AssignPipelineToPod",
      "Type": "Map",
      "ItemsPath": "$.runningPods.ResponseBody.items",
      "MaxConcurrency": 0,
      "Iterator": {
        "StartAt": "DeletePod",
        "States": {
          "DeletePod": {
            "Type": "Task",
            "End": true,
            "Comment": "Patch pod to set the activity ID label.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "DELETE",
              "Path.$": "$.metadata.selfLink"
            },
            "Catch": [
              {
                "ErrorEquals": [
                  "EKS.404"
                ],
                "Next": "Ignore404"
              }
            ]
          },
          "Ignore404": {
            "Type": "Pass",
            "End": true
          }
        }
      }
    },
    "AssignPipelineToPod": {
      "ResultPath": null,
      "Next": "WaitForPod",
      "Type": "Map",
      "ItemsPath": "$.retries",
      "MaxConcurrency": 1,
      "Retry": [
        {
          "ErrorEquals": [
            "NoPodsAvailable"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 11,
          "BackoffRate": 1.5
        }
      ],
      "Iterator": {
        "StartAt": "GetUnassignedPod",
        "States": {
          "GetUnassignedPod": {
            "Next": "IsPodAvailable",
            "Type": "Task",
            "Comment": "Retrieves first unassigned and running pipeline pod.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "GET",
              "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
              "QueryParameters": {
                "labelSelector": [
                  "!activityId,type=pipeline"
                ],
                "fieldSelector": [
                  "status.phase=Running"
                ]
              }
            }
          },
          "IsPodAvailable": {
            "Type": "Choice",
            "Comment": "Redirects to an error state if there are no available pods.",
            "Choices": [
              {
                "Variable": "$.ResponseBody.items[0]",
                "IsPresent": false,
                "Next": "NoPodsAvailable"
              }
            ],
            "Default": "AssignPodToPipeline"
          },
          "NoPodsAvailable": {
            "Type": "Fail",
            "Cause": "No available and running pipeline pods.",
            "Error": "NoPodsAvailable"
          },
          "AssignPodToPipeline": {
            "Description": "Send a message through SNS so that the API assigns a pod to the pipeline",
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "End": true,
            "Parameters": {
              "TopicArn": "arn:aws:sns:us-east-1:123456789012:myTopic",
              "MessageAttributes": {
                "kind": {
                  "DataType": "String",
                  "StringValue.$": "assignPodToPipeline"
                },
                "sandboxId": {
                  "DataType": "String"
                },
                "experimentId": {
                  "DataType": "String",
                  "StringValue.$": "mock-experiment-id"
                },
                "activityId": {
                  "DataType": "String"
                },
                "processName": {
                  "DataType": "String"
                }
              }
            }
          }
        }
      }
    },
    "WaitForPod": {
      "ResultPath": null,
      "Type": "Map",
      "ItemsPath": "$.retries",
      "MaxConcurrency": 1,
      "Retry": [
        {
          "ErrorEquals": [
            "NoPodsAvailable"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 11,
          "BackoffRate": 1.5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "AssignPipelineToPod"
        }
      ],
      "Next": "ClassifierFilterMap",
      "Iterator": {
        "StartAt": "GetUnassignedPod",
        "States": {
          "GetUnassignedPod": {
            "Next": "IsPodAvailable",
            "Type": "Task",
            "Comment": "Retrieves first unassigned and running pipeline pod.",
            "Resource": "arn:aws:states:::eks:call",
            "Parameters": {
              "ClusterName": "mock-cluster-name",
              "CertificateAuthority": "mock-ca",
              "Endpoint": "mock-endpoint",
              "Method": "GET",
              "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
              "QueryParameters": {
                "labelSelector": [
                  "!activityId,type=pipeline"
                ],
                "fieldSelector": [
                  "status.phase=Running"
                ]
              }
            }
          },
          "IsPodAvailable": {
            "Type": "Choice",
            "Comment": "Redirects to an error state if there are no available pods.",
            "Choices": [
              {
                "Variable": "$.ResponseBody.items[0]",
                "IsPresent": false,
                "Next": "NoPodsAvailable"
              }
            ],
            "Default": "AssignPodToPipeline"
          },
          "NoPodsAvailable": {
            "Type": "Fail",
            "Cause": "No available and running pipeline pods.",
            "Error": "NoPodsAvailable"
          },
          "AssignPodToPipeline": {
            "Description": "Send a message through SNS so that the API assigns a pod to the pipeline",
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "End": true,
            "Parameters": {
              "TopicArn": "arn:aws:sns:us-east-1:123456789012:myTopic",
              "MessageAttributes": {
                "kind": {
                  "DataType": "String",
                  "StringValue.$": "assignPodToPipeline"
                },
                "sandboxId": {
                  "DataType": "String"
                },
                "experimentId": {
                  "DataType": "String",
                  "StringValue.$": "mock-experiment-id"
                },
                "activityId": {
                  "DataType": "String"
                },
                "processName": {
                  "DataType": "String"
                }
              }
            }
          }
        }
      }
    },
    "ClassifierFilterMap": {
      "Type": "Map",
      "Next": "CellSizeDistributionFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "ClassifierFilter",
        "States": {
          "ClassifierFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "classifier",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "CellSizeDistributionFilterMap": {
      "Type": "Map",
      "Next": "MitochondrialContentFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "CellSizeDistributionFilter",
        "States": {
          "CellSizeDistributionFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "cellSizeDistribution",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "MitochondrialContentFilterMap": {
      "Type": "Map",
      "Next": "NumGenesVsNumUmisFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "MitochondrialContentFilter",
        "States": {
          "MitochondrialContentFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "mitochondrialContent",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "NumGenesVsNumUmisFilterMap": {
      "Type": "Map",
      "Next": "DoubletScoresFilterMap",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "NumGenesVsNumUmisFilter",
        "States": {
          "NumGenesVsNumUmisFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "numGenesVsNumUmis",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "DoubletScoresFilterMap": {
      "Type": "Map",
      "Next": "DataIntegration",
      "ResultPath": null,
      "ItemsPath": "$.samples",
      "Iterator": {
        "StartAt": "DoubletScoresFilter",
        "States": {
          "DoubletScoresFilter": {
            "End": true,
            "Type": "Task",
            "ResultPath": null,
            "TimeoutSeconds": 10800,
            "Parameters": {
              "experimentId": "mock-experiment-id",
              "taskName": "doubletScores",
              "config": {},
              "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
            }
          }
        }
      }
    },
    "DataIntegration": {
      "Next": "ConfigureEmbedding",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "dataIntegration",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "ConfigureEmbedding": {
      "Next": "EndOfPipeline",
      "Type": "Task",
      "ResultPath": null,
      "TimeoutSeconds": 10800,
      "Parameters": {
        "experimentId": "mock-experiment-id",
        "taskName": "configureEmbedding",
        "config": {},
        "server": "remoter-server-mock-experiment-id.pipeline-test-namespace.svc.cluster.local"
      }
    },
    "EndOfPipeline": {
      "Type": "Pass",
      "End": true
    }
  }
}
`;
