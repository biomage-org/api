// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test for pipeline services Create Gem2s pipeline works 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "name": "biomage-test",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Object {
        "name": "biomage-test",
      },
    },
  ],
}
`;

exports[`test for pipeline services Create Gem2s pipeline works 2`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-gem2s-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
      "roleArn": "arn:aws:iam::test-account-id:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "testExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  },
]
`;

exports[`test for pipeline services Create Gem2s pipeline works 3`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "input": "{\\"retries\\":[\\"retry\\"]}",
      "stateMachineArn": "test-machine",
      "traceHeader": undefined,
    },
  },
]
`;

exports[`test for pipeline services Create QC pipeline works 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "name": "biomage-test",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Object {
        "name": "biomage-test",
      },
    },
  ],
}
`;

exports[`test for pipeline services Create QC pipeline works 2`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-qc-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
      "roleArn": "arn:aws:iam::test-account-id:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "testExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  },
]
`;

exports[`test for pipeline services Create QC pipeline works 3`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "input": "{\\"samples\\":[{\\"sampleUuid\\":\\"oneSample\\",\\"index\\":0},{\\"sampleUuid\\":\\"otherSample\\",\\"index\\":1}],\\"retries\\":[\\"retry\\"]}",
      "stateMachineArn": "test-machine",
      "traceHeader": undefined,
    },
  },
]
`;

exports[`test for pipeline services Gem2s Pipeline is updated instead of created if an error is thrown. 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "name": "biomage-test",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Object {
        "name": "biomage-test",
      },
    },
  ],
}
`;

exports[`test for pipeline services Gem2s Pipeline is updated instead of created if an error is thrown. 2`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-gem2s-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
      "roleArn": "arn:aws:iam::test-account-id:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "testExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  },
]
`;

exports[`test for pipeline services Gem2s Pipeline is updated instead of created if an error is thrown. 3`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "roleArn": "arn:aws:iam::test-account-id:role/state-machine-role-test",
      "stateMachineArn": "arn:aws:states:eu-west-1:test-account-id:stateMachine:biomage-gem2s-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
    },
  },
]
`;

exports[`test for pipeline services Gem2s Pipeline is updated instead of created if an error is thrown. 4`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "input": "{\\"retries\\":[\\"retry\\"]}",
      "stateMachineArn": "arn:aws:states:eu-west-1:test-account-id:stateMachine:biomage-gem2s-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
      "traceHeader": undefined,
    },
  },
]
`;

exports[`test for pipeline services Parses QC processingConfig correctly 1`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "Comment": "Pipeline for clusterEnv 'test'",
      "StartAt": "AssignPipelineToPod",
      "States": Object {
        "AssignPipelineToPod": Object {
          "ItemsPath": "$.retries",
          "Iterator": Object {
            "StartAt": "GetUnassignedPod",
            "States": Object {
              "AssignPodToPipeline": Object {
                "Comment": "Patch pod to set the activity ID label.",
                "End": true,
                "Parameters": Object {
                  "CertificateAuthority": "AAAAAAAAAAA",
                  "ClusterName": "biomage-test",
                  "Endpoint": "https://test-endpoint.me/fgh",
                  "Method": "PATCH",
                  "Path.$": "$.ResponseBody.items[0].metadata.selfLink",
                  "RequestBody": Object {
                    "metadata": Object {
                      "labels": Object {
                        "activityId": "pipeline-test-mock-uuid",
                      },
                    },
                  },
                },
                "Resource": "arn:aws:states:::eks:call",
                "ResultPath": "$.PatchResult",
                "Type": "Task",
              },
              "GetUnassignedPod": Object {
                "Comment": "Retrieves first unassigned and running pipeline pod.",
                "Next": "IsPodAvailable",
                "Parameters": Object {
                  "CertificateAuthority": "AAAAAAAAAAA",
                  "ClusterName": "biomage-test",
                  "Endpoint": "https://test-endpoint.me/fgh",
                  "Method": "GET",
                  "Path": "/api/v1/namespaces/pipeline-test-namespace/pods",
                  "QueryParameters": Object {
                    "fieldSelector": Array [
                      "status.phase=Running",
                    ],
                    "labelSelector": Array [
                      "!activityId,type=pipeline",
                    ],
                  },
                },
                "Resource": "arn:aws:states:::eks:call",
                "Type": "Task",
              },
              "IsPodAvailable": Object {
                "Choices": Array [
                  Object {
                    "IsPresent": false,
                    "Next": "NoPodsAvailable",
                    "Variable": "$.ResponseBody.items[0]",
                  },
                ],
                "Comment": "Redirects to an error state if there are no available pods.",
                "Default": "AssignPodToPipeline",
                "Type": "Choice",
              },
              "NoPodsAvailable": Object {
                "Cause": "No available and running pipeline pods.",
                "Error": "NoPodsAvailable",
                "Type": "Fail",
              },
            },
          },
          "MaxConcurrency": 1,
          "Next": "ClassifierFilterMap",
          "ResultPath": null,
          "Retry": Array [
            Object {
              "BackoffRate": 1.5,
              "ErrorEquals": Array [
                "NoPodsAvailable",
              ],
              "IntervalSeconds": 2,
              "MaxAttempts": 11,
            },
          ],
          "Type": "Map",
        },
        "CellSizeDistributionFilterMap": Object {
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "CellSizeDistributionFilter",
            "States": Object {
              "CellSizeDistributionFilter": Object {
                "End": true,
                "Parameters": Object {
                  "config": Object {},
                  "experimentId": "testExperimentId",
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "cellSizeDistribution",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:test-account-id:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "MitochondrialContentFilterMap",
          "ResultPath": null,
          "Type": "Map",
        },
        "ClassifierFilterMap": Object {
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "ClassifierFilter",
            "States": Object {
              "ClassifierFilter": Object {
                "End": true,
                "Parameters": Object {
                  "config": Object {},
                  "experimentId": "testExperimentId",
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "classifier",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:test-account-id:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "CellSizeDistributionFilterMap",
          "ResultPath": null,
          "Type": "Map",
        },
        "ConfigureEmbedding": Object {
          "Next": "EndOfPipeline",
          "Parameters": Object {
            "config": Object {},
            "experimentId": "testExperimentId",
            "processName": "qc",
            "sampleUuid": "",
            "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
            "taskName": "configureEmbedding",
            "uploadCountMatrix": false,
          },
          "Resource": "arn:aws:states:eu-west-1:test-account-id:activity:pipeline-test-mock-uuid",
          "ResultPath": null,
          "TimeoutSeconds": 10800,
          "Type": "Task",
        },
        "DataIntegration": Object {
          "Next": "ConfigureEmbedding",
          "Parameters": Object {
            "config": Object {},
            "experimentId": "testExperimentId",
            "processName": "qc",
            "sampleUuid": "",
            "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
            "taskName": "dataIntegration",
            "uploadCountMatrix": true,
          },
          "Resource": "arn:aws:states:eu-west-1:test-account-id:activity:pipeline-test-mock-uuid",
          "ResultPath": null,
          "TimeoutSeconds": 10800,
          "Type": "Task",
        },
        "DoubletScoresFilterMap": Object {
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "DoubletScoresFilter",
            "States": Object {
              "DoubletScoresFilter": Object {
                "End": true,
                "Parameters": Object {
                  "config": Object {
                    "oneSample": Object {
                      "defaultFilterSettings": Object {
                        "oneSetting": 1,
                      },
                      "enabled": true,
                      "filterSettings": Object {
                        "oneSetting": 7,
                      },
                    },
                    "otherSample": Object {
                      "enabled": true,
                      "filterSettings": Object {
                        "oneSetting": 15,
                      },
                    },
                  },
                  "experimentId": "testExperimentId",
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "doubletScores",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:test-account-id:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "DataIntegration",
          "ResultPath": null,
          "Type": "Map",
        },
        "EndOfPipeline": Object {
          "End": true,
          "Type": "Pass",
        },
        "MitochondrialContentFilterMap": Object {
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "MitochondrialContentFilter",
            "States": Object {
              "MitochondrialContentFilter": Object {
                "End": true,
                "Parameters": Object {
                  "config": Object {},
                  "experimentId": "testExperimentId",
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "mitochondrialContent",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:test-account-id:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "NumGenesVsNumUmisFilterMap",
          "ResultPath": null,
          "Type": "Map",
        },
        "NumGenesVsNumUmisFilterMap": Object {
          "ItemsPath": "$.samples",
          "Iterator": Object {
            "StartAt": "NumGenesVsNumUmisFilter",
            "States": Object {
              "NumGenesVsNumUmisFilter": Object {
                "End": true,
                "Parameters": Object {
                  "config": Object {},
                  "experimentId": "testExperimentId",
                  "processName": "qc",
                  "sampleUuid.$": "$.sampleUuid",
                  "server": "remoter-server-testExperimentId.pipeline-test-namespace.svc.cluster.local",
                  "taskName": "numGenesVsNumUmis",
                  "uploadCountMatrix": false,
                },
                "Resource": "arn:aws:states:eu-west-1:test-account-id:activity:pipeline-test-mock-uuid",
                "ResultPath": null,
                "TimeoutSeconds": 10800,
                "Type": "Task",
              },
            },
          },
          "Next": "DoubletScoresFilterMap",
          "ResultPath": null,
          "Type": "Map",
        },
      },
    },
  },
]
`;

exports[`test for pipeline services QC Pipeline is updated instead of created if an error is thrown. 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "name": "biomage-test",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Object {
        "name": "biomage-test",
      },
    },
  ],
}
`;

exports[`test for pipeline services QC Pipeline is updated instead of created if an error is thrown. 2`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "loggingConfiguration": Object {
        "level": "OFF",
      },
      "name": "biomage-qc-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
      "roleArn": "arn:aws:iam::test-account-id:role/state-machine-role-test",
      "tags": Array [
        Object {
          "key": "experimentId",
          "value": "testExperimentId",
        },
        Object {
          "key": "clusterEnv",
          "value": "test",
        },
        Object {
          "key": "sandboxId",
          "value": "default",
        },
      ],
      "type": "STANDARD",
    },
  },
]
`;

exports[`test for pipeline services QC Pipeline is updated instead of created if an error is thrown. 3`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "roleArn": "arn:aws:iam::test-account-id:role/state-machine-role-test",
      "stateMachineArn": "arn:aws:states:eu-west-1:test-account-id:stateMachine:biomage-qc-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
    },
  },
]
`;

exports[`test for pipeline services QC Pipeline is updated instead of created if an error is thrown. 4`] = `
Array [
  Object {
    "type": "return",
    "value": Object {
      "input": "{\\"samples\\":[{\\"sampleUuid\\":\\"oneSample\\",\\"index\\":0},{\\"sampleUuid\\":\\"otherSample\\",\\"index\\":1}],\\"retries\\":[\\"retry\\"]}",
      "stateMachineArn": "arn:aws:states:eu-west-1:test-account-id:stateMachine:biomage-qc-test-b2bacc54e31beb2bda7b4bd9b1ec33ec84eae60f",
      "traceHeader": undefined,
    },
  },
]
`;
